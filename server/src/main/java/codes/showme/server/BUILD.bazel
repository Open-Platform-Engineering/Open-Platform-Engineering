#load( "@io_bazel_rules_docker//container:container.bzl","container_image")
package(default_visibility = ["//visibility:public"])

java_library(
    name = "lib",
    srcs = glob(["*.java"]),
    deps = [
        "//repository-impl/src/main/java/codes/showme/domain/team:AccountRepositoryImpl",
        "//repository-impl/src/main/java/codes/showme/domain/escalation:EscalationPolicyRepositoryImpl",
        "//repository-impl/src/main/java/codes/showme/domain/incident:IncidentRepositoryImpl",
        "//repository-impl/src/main/java/codes/showme/domain/schedule:ScheduleRuleRepositoryImpl",
        "//core/src/main/java/codes/showme/domain/incident:incident",
        "//server/src/main/java/codes/showme/server/account:account",
        "//tech-lib:ioc",
        "//spring-ioc-impl:ioc-instance-provider-spring-impl",
        "@maven//:org_springframework_boot_spring_boot",
        "@maven//:org_springframework_boot_spring_boot_autoconfigure",
        "@maven//:org_springframework_boot_spring_boot_starter_web",
        "@maven//:org_springframework_spring_context",
        "@maven//:org_springframework_spring_webmvc",
        "@maven//:org_springframework_boot_spring_boot_starter_validation",
        "@maven//:jakarta_servlet_jakarta_servlet_api",
        "@maven//:org_springframework_spring_web",
    ],
)

java_binary(
    name = "app",
    main_class = "codes.showme.server.Main",
    resources = [
        "//server/src/main/resources:server-resources",
    ],
    runtime_deps = [
        ":lib",
    ],
)
java_binary(
    name = "app_lib",
    main_class = "codes.showme.server.Main",
    create_executable = False,
    resources = [
        "//server/src/main/resources:server-resources",
    ],
    runtime_deps = [
        ":lib",
    ],
)

#container_image(
#    name = "nginx",
#    base = "@nginx//image",
#    user = "nonroot",
#)

